// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
	relationMode= "prisma"
}

model Store {
	id        String  @id @default(uuid())
	name      String
	userId 		String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[] @relation("StoretoCategory")
  sizes Size[] @relation("StoreToSize")
  colors Color[] @relation("StoreToColor")
  products Product[] @relation("StoretoProduct")
  orders Order[] @relation("StoreToOrder")
	createdAt DateTime @default(now()) 
	updatedAt DateTime @updatedAt
}

model Billboard{
  id        String  @id @default(uuid())
  storeId   String
  store     Store @relation("StoreToBillboard", fields: [storeId], references: [id])
  label     String
  imageUrl  String
  category  Category[]
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt

  @@index([storeId], name: "storeId")
}

model Category{
  id        String  @id @default(uuid())
  name      String
  storeId   String
  store Store @relation("StoretoCategory", fields: [storeId], references: [id])
  billboardId String
  billboard Billboard @relation(fields: [billboardId], references: [id])
  products Product[] @relation("CategorytoProduct")
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size{
  id      String  @id @default(uuid())
  storeId String
  store   Store @relation("StoreToSize", fields: [storeId], references: [id])
  name    String
  value   String
  products Product[] @relation("SizetoProduct")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index ([storeId])
}

model Color{
  id      String  @id @default(uuid())
  storeId String
  store   Store @relation("StoreToColor", fields: [storeId], references: [id])
  name    String
  value   String
  products Product[] @relation("ColortoProduct")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index ([storeId])
}

model Product{
  id        String  @id @default(uuid())
  storeId   String
  store     Store @relation("StoretoProduct", fields: [storeId], references: [id])
  categoryId String
  category  Category @relation("CategorytoProduct", fields: [categoryId], references: [id])
  name      String
  description String @db.VarChar(1000) @default("")
  price     Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  sizeId    String
  size      Size @relation("SizetoProduct", fields: [sizeId], references: [id])
  colorId   String
  color     Color @relation("ColortoProduct",fields: [colorId], references: [id])
  variants  Variant[]
  options   Option[]
  images    Image[] 
  orderItems OrderItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Variant {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  title     String
  options   Option[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Option {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  variantId String
  variant   Variant  @relation(fields: [variantId], references: [id])
  name      String
  value     String
  price     Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([variantId])
}

model Image {
  id        String  @id @default(uuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order{
  id        String  @id @default(uuid())
  storeId   String
  store    Store @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid Boolean @default(false)
  phone String @default("")
  address String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model OrderItem{
  id        String  @id @default(uuid())
  orderId   String
  order     Order @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}